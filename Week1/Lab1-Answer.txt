-- LAB1 Question2
DECLARE
  v_introduction VARCHAR2(40);
  v_num NUMBER(8,2);
  c_con CONSTANT VARCHAR2(5) := '704B';
  v_boo BOOLEAN;
  v_date DATE := TRUNC(SYSDATE) + 7;
BEGIN
  DBMS_OUTPUT.PUT_LINE('c_con is : ' || c_con);
  DBMS_OUTPUT.PUT_LINE('v_date is : ' || v_date);
  IF  v_introduction LIKE '%SQL%' THEN
     DBMS_OUTPUT.PUT_LINE ('This course is '|| v_introduction ||'.');     
  ELSE
     IF c_con = '704B' THEN
       IF v_introduction IS NOT NULL THEN
         DBMS_OUTPUT.PUT_LINE ('The course is '|| v_introduction ||'.'||' The location is '|| c_con ||'.'); 
       ELSE
         DBMS_OUTPUT.PUT_LINE ('The course is unknown.'||' The location is '|| c_con ||'.');
       END IF;
     ELSE
       DBMS_OUTPUT.PUT_LINE ('Course and location could not be determined.');
     END IF;
  END IF;     
END;
/

-- LAB1 Question3
-- A
CREATE TABLE LAB1_tab (
 personID NUMBER,
 lname VARCHAR2(20)
)

-- B
CREATE SEQUENCE Lab1_seq
START WITH 1
INCREMENT BY 5;

-- C
BEGIN <<outer>>
DECLARE 
  v_id LAB1_tab.personID%TYPE;
  v_lname LAB1_tab.lname%TYPE;
BEGIN 
<<b>>    
  BEGIN	
	SELECT s.last_name INTO v_lname
	FROM student s
	LEFT JOIN enrollment e ON e.student_id = s.student_id
	WHERE LENGTH(s.last_name) < 9
	GROUP BY s.student_id, s.last_name
	HAVING  COUNT(e.student_id) = (
		SELECT MAX(COUNT(e.student_id)) 
		FROM enrollment e
		GROUP BY e.student_id
	);
	INSERT INTO LAB1_tab VALUES (Lab1_seq.NEXTVAL, v_lname);
  EXCEPTION
	WHEN TOO_MANY_ROWS THEN
      DBMS_OUTPUT.PUT_LINE('Multiple Names for maximum students.');
  END;
<<c>>
  BEGIN
	SELECT s.last_name INTO v_lname
	FROM student s
	LEFT JOIN enrollment e ON e.student_id = s.student_id
	GROUP BY s.student_id, s.last_name
	HAVING  COUNT(e.student_id) = (
		SELECT MIN(COUNT(e.student_id)) 
		FROM enrollment e
		GROUP BY e.student_id
	);
	INSERT INTO LAB1_tab VALUES (Lab1_seq.NEXTVAL, v_lname);
  EXCEPTION
	WHEN TOO_MANY_ROWS THEN
      DBMS_OUTPUT.PUT_LINE('Multiple Names for minimum students.');
  END;
<<d>>
  BEGIN
    SELECT i.last_name INTO v_lname
	FROM instructor i
	LEFT JOIN section s ON s.instructor_id = i.instructor_id
	WHERE i.last_name NOT LIKE '%s'
	GROUP BY s.instructor_id,i.instructor_id, i.last_name
	HAVING COUNT(s.instructor_id) = (
		SELECT MIN(COUNT(s.instructor_id))
		FROM section s		
		GROUP BY s.instructor_id
	);
	INSERT INTO LAB1_tab VALUES(outer.v_id,v_lname);
  EXCEPTION
	WHEN TOO_MANY_ROWS THEN
      DBMS_OUTPUT.PUT_LINE('Multiple Names for maximum teachers.');
  END;
<<e>>
  BEGIN
    SELECT i.last_name INTO v_lname
	FROM instructor i
	LEFT JOIN section s ON s.instructor_id = i.instructor_id
	WHERE i.last_name NOT LIKE '%s'
	GROUP BY s.instructor_id,i.instructor_id, i.last_name
	HAVING COUNT(s.instructor_id) = (
		SELECT MAX(COUNT(s.instructor_id))
		FROM section		
		GROUP BY s.instructor_id
	);
	INSERT INTO LAB1_tab VALUES(Lab1_seq.NEXTVAL,v_lname);
  EXCEPTION
	WHEN TOO_MANY_ROWS THEN
      DBMS_OUTPUT.PUT_LINE('Multiple Names for minimum teachers.');
  END;  
END;
END outer;
/

-- f
SELECT * FROM LAB1_tab;

DROP TABLE LAB1_tab;
DROP SEQUENCE Lab1_seq;
/